// Generated on Tue Aug 25 16:14:34 +0200 2009 from /home/elven/code/nwnx2-linux/trunk/plugins/ice/build/funcs.nss

// Not exported:
//   getFirstEffect getFirstFactionMember getFirstItemInInventory getFirstItemProperty getFirstInPersistentObject getFirstObjectInArea getFirstObjectInShape getFirstPC
//   getNextEffect getNextFactionMember getNextInPersistentObject getNextItemInInventory getNextItemProperty getNextObjectInArea getNextObjectInShape getNextPC
//   abs acos asin atan cos fabs log pow
//   random sin sqrt tan d2 d3 d4 d6
//   d8 d10 d12 d20 d100 yardsToMeters feetToMeters getSubString
//   getStringUpperCase getStringRight getStringLowerCase getStringLength getStringLeft findSubString insertString testStringAgainstPattern
//   intToHexString intToString intToFloat floatToString floatToInt stringToFloat stringToInt printFloat
//   printInteger printObject printString printVector objectToString getFacingFromLocation getAreaFromLocation getPositionFromLocation
//   spawnScriptDebugger location vector

module NWN {
  enum EffectType { InvalidEffect, DamageResistanceEffect, RegenerateEffect, DamageReductionEffect, TemporaryHitpointsEffect, EntangleEffect, InvulnerableEffect, DeafEffect, ResurrectionEffect, ImmunityEffect, EnemyAttackBonusEffect, ArcaneSpellFailureEffect, AreaOfEffectEffect, BeamEffect, CharmedEffect, ConfusedEffect, FrightenedEffect, DominatedEffect, ParalyzeEffect, DazedEffect, StunnedEffect, SleepEffect, PoisonEffect, DiseaseEffect, CurseEffect, SilenceEffect, TurnedEffect, HasteEffect, SlowEffect, AbilityIncreaseEffect, AbilityDecreaseEffect, AttackIncreaseEffect, AttackDecreaseEffect, DamageIncreaseEffect, DamageDecreaseEffect, DamageImmunityIncreaseEffect, DamageImmunityDecreaseEffect, ACIncreaseEffect, ACDecreaseEffect, MovementSpeedIncreaseEffect, MovementSpeedDecreaseEffect, SavingThrowIncreaseEffect, SavingThrowDecreaseEffect, SpellResistanceIncreaseEffect, SpellResistanceDecreaseEffect, SkillIncreaseEffect, SkillDecreaseEffect, InvisibilityEffect, ImprovedInvisibilityEffect, DarknessEffect, DispelMagicAllEffect, ElementalShieldEffect, NegativeLevelEffect, PolymorphEffect, SanctuaryEffect, TrueSeeingEffect, SeeInvisibleEffect, TimestopEffect, BlindnessEffect, SpellLevelAbsorptionEffect, DispelMagicBestEffect, UltravisionEffect, MissChanceEffect, ConcealmentEffect, SpellImmunityEffect, VisualEffect, DisappearAppearEffect, SwarmEffect, TurnResistanceDecreaseEffect, TurnResistanceIncreaseEffect, PetrifyEffect, CutsceneParalyzeEffect, EtherealEffect, SpellFailureEffect, CutsceneGhostEffect, CutsceneImmobilizeEffect };
  enum Weather { InvalidWeather, ClearWeather, RainWeather, SnowWeather, AreaDefaultsWeather };
  enum TileSourceLightColor { BlackTileSourceLightColor, WhiteTileSourceLightColor, PaleDarkYellowTileSourceLightColor, PaleYellowTileSourceLightColor, PaleDarkGreenTileSourceLightColor, PaleGreenTileSourceLightColor, PaleDarkAquaTileSourceLightColor, PaleAquaTileSourceLightColor, PaleDarkBlueTileSourceLightColor, PaleBlueTileSourceLightColor, PaleDarkPurpleTileSourceLightColor, PalePurpleTileSourceLightColor, PaleDarkRedTileSourceLightColor, PaleRedTileSourceLightColor, PaleDarkOrangeTileSourceLightColor, PaleOrangeTileSourceLightColor };
  enum StandardFaction { Hostile, Commoner, Merchant, Defender };
  enum SavingThrowResult { FailedRoll, SucceededRoll, ImmuneToSaveType };
  enum Action { MoveToPointAction, PickupItemAction, DropItemAction, AttackObjectAction, CastSpellAction, OpenDoorAction, CloseDoorAction, DialogObjectAction, DisableTrapAction, RecoverTrapAction, FlagTrapAction, ExamineTrapAction, SetTrapAction, OpenLockAction, LockAction, UseObjectAction, AnimalEmpathyAction, RestAction, TauntAction, ItemCastSpellAction, CounterSpellAction, HealAction, PickpocketAction, FollowAction, SitAction, SmiteGoodAction, KIDamageAction, RandomWalkAction, InvalidAction };
  enum ACModifyType { ACDodgeBonus, ACNaturalBonus, ACArmorEnchantmentBonus, ACShieldEnchantmentBonus, ACDeflectionBonus };
  enum Gender { MaleGender, Female, BothGender, OtherGender, NoneGender };
  enum IPRacialType { DwarfIPRace, ElfIPRace, GnomeIPRace, HalflingIPRace, HalfelfIPRace, HalforcIPRace, HumanIPRace, AberrationIPRace, AnimalIPRace, BeastIPRace, ConstructIPRace, DragonIPRace, HumanoidGoblinoidIPRace, HumanoidMonstrousIPRace, HumanoidOrcIPRace, HumanoidReptilianIPRace, ElementalIPRace, FeyIPRace, GiantIPRace, MagicalBeastIPRace, OutsiderIPRace, ShapechangerIPRace, UndeadIPRace, VerminIPRace };
  enum PlaceableAction { UsePlaceable, UnlockPlaceable, BashPlaceable, KnockPlaceable };
  enum Ability { Strength, Dexterity, Constitution, Intelligence, Wisdom, Charisma };
  enum IPSpellSchool { AbjurationIPSchool, ConjurationIPSchool, DivinationIPSchool, EnchantmentIPSchool, EvocationIPSchool, IllusionIPSchool, NecromancyIPSchool, TransmutationIPSchool };
  enum IPAlignGroup { AllAlignGroup, NeutralAlignGroup, LawfulAlignGroup, ChaoticAlignGroup, GoodAlignGroup, EvilAlignGroup };
  enum EffectSubType { MagicalSubType, SupernaturalSubType, ExtraordinarySubType };
  enum TileMainLightColor { BlackTileMainLightColor, DimWhiteTileMainLightColor, WhiteTileMainLightColor, BrightWhiteTileMainLightColor, PaleDarkYellowTileMainLightColor, DarkYellowTileMainLightColor, PaleYellowTileMainLightColor, YellowTileMainLightColor, PaleDarkGreenTileMainLightColor, DarkGreenTileMainLightColor, PaleGreenTileMainLightColor, GreenTileMainLightColor, PaleDarkAquaTileMainLightColor, DarkAquaTileMainLightColor, PaleAquaTileMainLightColor, AquaTileMainLightColor, PaleDarkBlueTileMainLightColor, DarkBlueTileMainLightColor, PaleBlueTileMainLightColor, BlueTileMainLightColor, PaleDarkPurpleTileMainLightColor, DarkPurpleTileMainLightColor, PalePurpleTileMainLightColor, PurpleTileMainLightColor, PaleDarkRedTileMainLightColor, DarkRedTileMainLightColor, PaleRedTileMainLightColor, RedTileMainLightColor, PaleDarkOrangeTileMainLightColor, DarkOrangeTileMainLightColor, PaleOrangeTileMainLightColor, OrangeTileMainLightColor };
  enum DamagePower { NormalDamage, PlusOneDamage, PlusTwoDamage, PlusThreeDamage, PlusFourDamage, PlusFiveDamage, EnergyDamage, PlusSixDamage, PlusSevenDamage, PlusEightDamage, PlusNineDamage, PlusTenDamage, PlusElevenDamage, PlusTwelveDamage, PlusThirteenDamage, PlusFourteenDamage, PlusFifteenDamage, PlusSixteenDamage, PlusSeventeenDamage, PlusEighteenDamage, PlusNinteenDamage, PlusTwentyDamage };
  enum DamageType { BludgeoningDamage, PiercingDamage, SlashingDamage, MagicalDamage, AcidDamage, ColdDamage, DivineDamage, ElectricalDamage, FireDamage, NegativeDamage, PositiveDamage, SonicDamage, BaseDamage, ACVsAllDamage };
  enum SaveType { AllOrNoneSaveType, MindSpellsSaveType, PoisonSaveType, DiseaseSaveType, FearSaveType, SonicSaveType, AcidSaveType, FireSaveType, ElectricitySaveType, PositiveSaveType, NegativeSaveType, DeathSaveType, ColdSaveType, DivineSaveType, TrapSaveType, SpellSaveType, GoodSaveType, EvilSaveType, LawSaveType, ChaosSaveType };
  enum CombatMode { InvalidCombatMode, ParryCombatMode, PowerAttackCombatMode, ImprovedPowerAttackCombatMode, FlurryOfBlowsCombatMode, RapidShotCombatMode, ExpertiseCombatMode, ImprovedExpertiseCombatMode, DefensiveCastingCombatMode, DirtyFightingCombatMode, DefensiveStanceCombatMode };
  enum IPTrapType { SpikeIPTrap, HolyIPTrap, TangleIPTrap, BlobOfAcidIPTrap, FireIPTrap, ElectricalIPTrap, GasIPTrap, FrostIPTrap, AcidSplashIPTrap, SonicIPTrap, NegativeIPTrap };
  enum CreatureSize { InvalidSize, TinySize, SmallSize, MediumSize, LargeSize, HugeSize };
  enum AssociateCommand { ToggleSearchCommand, ToggleStealthCommand, ToggleCastingCommand, DisarmTrapCommand, InventoryCommand, PickLockCommand, LeavePartyCommand, MasterGoingToBeAttackedCommand, MasterAttackedOtherCommand, MasterSawTrapCommand, UnpossessFamiliarCommand, ReleaseDominationCommand, MasterUnderAttackCommand, UnsummonSummonedCommand, UnsummonAnimalCompanionCommand, UnsummonFamiliarCommand, GuardMasterCommand, MasterFailedLockpickCommand, FollowMasterCommand, HealMasterCommand, AttackNearestCommand, StandGroundCommand };
  enum ObjectType { InvalidObject, Creature, Item, Trigger, Door, AOE, Waypoint, Placeable, Store, Encounter, All };
  enum DurationType { Instant, Temporary, Permanent };
  enum ActionMode { DetectMode, StealthMode, ParryMode, PowerAttackMode, ImprovedPowerAttackMode, CounterspellMode, FlurryOfBlowsMode, RapidShotMode, ExpertiseMode, ImprovedExpertiseMode, DefensiveCastMode, DirtyFightingMode };
  enum Alignment { Any, Neutral, Lawful, Chaotic, Good, Evil };
  enum TrapType { MinorSpikeTrap, AverageSpikeTrap, StrongSpikeTrap, DeadlySpikeTrap, MinorHolyTrap, AverageHolyTrap, StrongHolyTrap, DeadlyHolyTrap, MinorTangleTrap, AverageTangleTrap, StrongTangleTrap, DeadlyTangleTrap, MinorAcidTrap, AverageAcidTrap, StrongAcidTrap, DeadlyAcidTrap, MinorFireTrap, AverageFireTrap, StrongFireTrap, DeadlyFireTrap, MinorElectricalTrap, AverageElectricalTrap, StrongElectricalTrap, DeadlyElectricalTrap, MinorGasTrap, AverageGasTrap, StrongGasTrap, DeadlyGasTrap, MinorFrostTrap, AverageFrostTrap, StrongFrostTrap, DeadlyFrostTrap, MinorNegativeTrap, AverageNegativeTrap, StrongNegativeTrap, DeadlyNegativeTrap, MinorSonicTrap, AverageSonicTrap, StrongSonicTrap, DeadlySonicTrap, MinorAcidSplashTrap, AverageAcidSplashTrap, StrongAcidSplashTrap, DeadlyAcidSplashTrap, EpicElectricalTrap, EpicFireTrap, EpicFrostTrap, EpicSonicTrap };
  enum AttackBonus { MiscBonus, OnhandBonus, OffhandBonus };
  enum IPMiscImmunityType { BackstabIPImmunity, LevelAbilDrainIPImmunity, MindSpellsIPImmunity, PoisonIPImmunity, DiseaseIPImmunity, FearIPImmunity, KnockdownIPImmunity, ParalysisIPImmunity, CriticalHitsIPImmunity, DeathMagicIPImmunity };
  enum RacialType { DwarfRace, ElfRace, GnomeRace, HalflingRace, HalfelfRace, HalforcRace, HumanRace, AberrationRace, AnimalRace, BeastRace, ConstructRace, DragonRace, HumanoidGoblinoidRace, HumanoidMonstrousRace, HumanoidOrcRace, HumanoidReptilianRace, ElementalRace, FeyRace, GiantRace, MagicalBeastRace, OutsiderRace, ShapechangerRace, UndeadRace, VerminRace, InvalidRace, OozeRace };
  enum TalkVolume { TalkVol, WhisperVol, ShoutVol, SilentTalkVol, SilentShoutVol, PartyVol, TellVol };
  enum AssociateType { NoAssociate, HenchmanAssociate, AnimalCompanionAssociate, FamiliarAssociate, SummonedAssociate, DominatedAssociate };
  enum IPAlignment { LgAlignment, LnAlignment, LeAlignment, NgAlignment, TnAlignment, NeAlignment, CgAlignment, CnAlignment, CeAlignment };
  enum Button { MapButton, InventoryButton, JournalButton, CharacterButton, OptionsButton, SpellsButton, RestButton, PvPButton };
  enum SpecialAttack { InvalidSpecialAttack, CalledShotLegSpecialAttack, CalledShotArmSpecialAttack, SapSpecialAttack, DisarmSpecialAttack, ImprovedDisarmSpecialAttack, KnockdownSpecialAttack, ImprovedKnockdownSpecialAttack, StunningFistSpecialAttack, FlurryOfBlowsSpecialAttack, RapidShotSpecialAttack };
  enum IPDamageType { BludgeoningIPDamage, PiercingIPDamage, SlashingIPDamage, SubdualIPDamage, PhysicalIPDamage, MagicalIPDamage, AcidIPDamage, ColdIPDamage, DivineIPDamage, ElectricalIPDamage, FireIPDamage, NegativeIPDamage, PositiveIPDamage, SonicIPDamage };
  enum PhenoType { NormalPhenoType, BigPhenoType, Custom1PhenoType, Custom2PhenoType, Custom3PhenoType, Custom4PhenoType, Custom5PhenoType, Custom6PhenoType, Custom7PhenoType, Custom8PhenoType, Custom9PhenoType, Custom10PhenoType, Custom11PhenoType, Custom12PhenoType, Custom13PhenoType, Custom14PhenoType, Custom15PhenoType, Custom16PhenoType, Custom17PhenoType, Custom18PhenoType };
  enum InventorySlot { HeadSlot, ChestSlot, BootsSlot, ArmsSlot, RighthandSlot, LefthandSlot, CloakSlot, LeftringSlot, RightringSlot, NeckSlot, BeltSlot, ArrowsSlot, BulletsSlot, BoltsSlot, CreatureLefthandSlot, CreatureRighthandSlot, CreatureBiteSlot, CreatureArmorSlot };
  enum DoorAction { OpenDoor, UnlockDoor, BashDoor, IgnoreDoor, KnockDoor };
  enum ProjectilePathType { DefaultPath, HomingPath, BallisticPath, HighBallisticPath, AcceleratingPath };
  enum AILevel { DefaultAI, VeryLowAI, LowAI, NormalAI, HighAI, VeryHighAI };
  enum ShapeType { SpellCylinderShape, ConeShape, CubeShape, SpellConeShape, SphereShape };
  enum AttackResult { MissedAttack, HitAttack, CriticalHitAttack };
  enum CreaturePart { RightFootPart, LeftFootPart, RightShinPart, LeftShinPart, LeftThighPart, RightThighPart, PelvisPart, TorsoPart, BeltPart, NeckPart, RightForearmPart, LeftForearmPart, RightBicepPart, LeftBicepPart, RightShoulderPart, LeftShoulderPart, RightHandPart, LeftHandPart, HeadPart };
  enum MetaMagic { NoneMeta, EmpowerMeta, ExtendMeta, MaximizeMeta, QuickenMeta, SilentMeta, StillMeta, AnyMeta };
  enum SpellSchool { GeneralSchool, AbjurationSchool, ConjurationSchool, DivinationSchool, EnchantmentSchool, EvocationSchool, IllusionSchool, NecromancySchool, TransmutationSchool };
  enum MissChanceType { MissChanceVSAll, MissChanceVSRanged, MissChanceVSMelee };
  enum ImmunityType { NoneImmunity, MindSpellsImmunity, PoisonImmunity, DiseaseImmunity, FearImmunity, TrapImmunity, ParalysisImmunity, BlindnessImmunity, DeafnessImmunity, SlowImmunity, EntangleImmunity, SilenceImmunity, StunImmunity, SleepImmunity, CharmImmunity, DominateImmunity, ConfusedImmunity, CursedImmunity, DazedImmunity, AbilityDecreaseImmunity, AttackDecreaseImmunity, DamageDecreaseImmunity, DamageImmunityDecreaseImmunity, AcDecreaseImmunity, MovementSpeedDecreaseImmunity, SavingThrowDecreaseImmunity, SpellResistanceDecreaseImmunity, SkillDecreaseImmunity, KnockdownImmunity, NegativeLevelImmunity, SneakAttackImmunity, CriticalHitImmunity, DeathImmunity };

  sequence<int> IntSeq;

  /**
    Will be raised to you when you're trying to call
    a NWScript function outside of NWScript context.
    Only ever call NWScript functions while you have
    event context (e.g., you're inside event(...))
  **/
  exception NotInContextException {};

  /**
    You can serialize arbitary java objects into a
    server-side cache. This is useful for keeping
    around state between client restarts that is
    not on stored NWN local vars.
    Really untested.
  **/
  ["java:serializable:NWN.Persistable"]
  sequence<byte> Persistable;
  exception StateNotAvailableException {};

  exception InvalidObjectException {};
  exception InvalidEffectException {};
  exception InvalidItemPropertyException {};

  /**
    id is equivalent to the server-side object ID. As opposed to
    effects and iprps, you can access arbitary object-IDs by simply
    passing in the requested ID (for example, 0 for module).
  **/
  struct NWObject {
    int id;
  };
  sequence<NWObject> NWObjectSeq;

  /**
    A vector, pretty much like the NWN engine structure.
    Should be idempotent and non-mutable.
  **/
  struct NWVector {
    double x;
    double y;
    double z;
  };

  /**
    A location, just like the engine structure.
    orientation* is undefined, and probably ever 0, but added
    here for completeness' sake.
  **/
  struct NWLocation {
    NWObject area;
    double x;
    double y;
    double z;
    double orientationX;
    double orientationY;
    double orientationZ;
    double facing;
  };

  /**
    The struct returned by getAllEquipped(). Should be self-
    explainatory.
  **/
  struct NWCreatureEquipped {
    NWObjectSeq all;

    NWObject HeadSlot;
    NWObject ChestSlot;
    NWObject BootsSlot;
    NWObject ArmsSlot;
    NWObject RighthandSlot;
    NWObject LefthandSlot;
    NWObject CloakSlot;
    NWObject LeftringSlot;
    NWObject RightringSlot;
    NWObject NeckSlot;
    NWObject BeltSlot;
    NWObject ArrowsSlot;
    NWObject BulletsSlot;
    NWObject BoltsSlot;
    NWObject CreatureLefthandSlot;
    NWObject CreatureRighthandSlot;
    NWObject CreatureBiteSlot;
    NWObject CreatureArmorSlot;
  };



  /**
    id refers to a server-side mapping. Note that effects are only valid PER EVENT.
    Do not bother keeping around effect id references
    clientside, they will not be valid on the next round.
    If you pass in a id that has expired, InvalidEffectException
    will be raised to you.
  **/
  struct NWEffect {
    long id;

    DurationType tDurationType;
    EffectType tType;
    EffectSubType tSubType;
    bool tIconShown;
    NWObject tCreator;

    /*long id;
    long type;
    long durationType;
    long field4;
    long fieldC;
    long expireDay;
    long expireTime;
    long isExposed;
    long field28;
    long linkEffectID;
    long link2;

    long spellId;
    long creatorId;
    long isIconShown; */
  };
  sequence<NWEffect> NWEffectSeq;

  /**
    id refers to a server-side mapping. Note that effects are only valid PER EVENT.
    Do not bother keeping around effect id references
    clientside, they will not be valid on the next round.
    If you pass in a id that has expired, InvalidItemPropertyException
    will be raised to you.
  **/
  struct NWItemProperty {
    long id;

    DurationType tDurationType;
    int tType;
    int tSubType;
    int tCostTable;
    int tCostTableValue;
    int tParam1;
    int tParam1Value;
  };
  sequence<NWItemProperty> NWItemPropertySeq;


  interface NWScript {

    idempotent bool hasState(string key);
    idempotent Persistable getState(string key) throws StateNotAvailableException;
    idempotent void putState(string key, Persistable state);
    idempotent void delState(string key);
    idempotent void clearState();

    idempotent NWObjectSeq allPCs() throws NotInContextException;
    idempotent NWEffectSeq allEffects(NWObject o) throws NotInContextException;
    idempotent NWObjectSeq allInArea(NWObject area) throws NotInContextException;
    idempotent NWObjectSeq allInInventory(NWObject o) throws NotInContextException;
    idempotent NWCreatureEquipped allEquipped(NWObject o) throws NotInContextException;
    idempotent NWItemPropertySeq allItemProperties(NWObject item) throws NotInContextException;
    idempotent NWObjectSeq allInShape(ShapeType tShapeType, double fSize,
      NWLocation lTarget, bool bLineOfSight, ObjectType tObjectType, NWVector vOrigin) throws NotInContextException;
    idempotent NWObjectSeq allInFaction(NWObject memberOf, bool bPCOnly) throws NotInContextException;

    idempotent bool getEffectIconShown(NWEffect eff) throws NotInContextException, InvalidEffectException;
    idempotent void setEffectIconShown(NWEffect eff, bool bShown) throws NotInContextException, InvalidEffectException;

    void actionAttack(NWObject oAttackee, bool bPassive) throws NotInContextException;
    void actionCastFakeSpellAtLocation(int nSpell, NWLocation lTarget, ProjectilePathType tProjectilePathType) throws NotInContextException;
    void actionCastFakeSpellAtObject(int nSpell, NWObject oTarget, ProjectilePathType tProjectilePathType) throws NotInContextException;
    void actionCastSpellAtLocation(int nSpell, NWLocation lTargetLocation, MetaMagic tMetaMagic, bool bCheat, ProjectilePathType tProjectilePathType, bool bInstantSpell) throws NotInContextException;
    void actionCastSpellAtObject(int nSpell, NWObject oTarget, MetaMagic tMetaMagic, bool bCheat, int nDomainLevel, ProjectilePathType tProjectilePathType, bool bInstantSpell) throws NotInContextException;
    void actionCloseDoor(NWObject oDoor) throws NotInContextException;
    void actionCounterSpell(NWObject oCounterSpellTarget) throws NotInContextException;
    void actionEquipItem(NWObject oItem, InventorySlot tInventorySlot) throws NotInContextException;
    void actionEquipMostDamagingMelee(NWObject oVersus, bool bOffHand) throws NotInContextException;
    void actionEquipMostDamagingRanged(NWObject oVersus) throws NotInContextException;
    void actionEquipMostEffectiveArmor() throws NotInContextException;
    void actionExamine(NWObject oExamine) throws NotInContextException;
    void actionForceFollowObject(NWObject oFollow, double fFollowDistance) throws NotInContextException;
    void actionForceMoveToLocation(NWLocation lDestination, bool bRun, double fTimeout) throws NotInContextException;
    void actionForceMoveToObject(NWObject oMoveTo, bool bRun, double fRange, double fTimeout) throws NotInContextException;
    void actionGiveItem(NWObject oItem, NWObject oGiveTo) throws NotInContextException;
    void actionInteractObject(NWObject oPlaceable) throws NotInContextException;
    void actionJumpToLocation(NWLocation lLocation) throws NotInContextException;
    void actionJumpToObject(NWObject oToJumpTo, bool bWalkStraightLineToPoint) throws NotInContextException;
    void actionLockObject(NWObject oTarget) throws NotInContextException;
    void actionMoveAwayFromLocation(NWLocation lMoveAwayFrom, bool bRun, double fMoveAwayRange) throws NotInContextException;
    void actionMoveAwayFromObject(NWObject oFleeFrom, bool bRun, double fMoveAwayRange) throws NotInContextException;
    void actionMoveToLocation(NWLocation lDestination, bool bRun) throws NotInContextException;
    void actionMoveToObject(NWObject oMoveTo, bool bRun, double fRange) throws NotInContextException;
    void actionOpenDoor(NWObject oDoor) throws NotInContextException;
    void actionPauseConversation() throws NotInContextException;
    void actionPickUpItem(NWObject oItem) throws NotInContextException;
    void actionPlayAnimation(int nAnimation, double fSpeed, double fDurationSeconds) throws NotInContextException;
    void actionPutDownItem(NWObject oItem) throws NotInContextException;
    void actionRandomWalk() throws NotInContextException;
    void actionRest(bool bCreatureToEnemyLineOfSightCheck) throws NotInContextException;
    void actionResumeConversation() throws NotInContextException;
    void actionSit(NWObject oChair) throws NotInContextException;
    void actionSpeakString(string sStringToSpeak, TalkVolume tTalkVolume) throws NotInContextException;
    void actionSpeakStringByStrRef(int nStrRef, TalkVolume tTalkVolume) throws NotInContextException;
    void actionStartConversation(NWObject oObjectToConverseWith, string sDialogResRef, bool bPrivateConversation, bool bPlayHello) throws NotInContextException;
    void actionTakeItem(NWObject oItem, NWObject oTakeFrom) throws NotInContextException;
    void actionUnequipItem(NWObject oItem) throws NotInContextException;
    void actionUnlockObject(NWObject oTarget) throws NotInContextException;
    void actionUseFeat(int nFeat, NWObject oTarget) throws NotInContextException;
    void actionUseSkill(int nSkill, NWObject oTarget, int nSubSkill, NWObject oItemUsed) throws NotInContextException;
    void actionWait(double fSeconds) throws NotInContextException;
    void activatePortal(NWObject oTarget, string sIPaddress, string sPassword, string sWaypointTag, bool bSeemless) throws NotInContextException;
    void addHenchman(NWObject oMaster, NWObject oHenchman) throws NotInContextException;
    void addItemProperty(DurationType tDurationType, NWItemProperty ipProperty, NWObject oItem, double fDuration) throws NotInContextException, InvalidItemPropertyException;
    void addJournalQuestEntry(string szPlotID, int nState, NWObject oCreature, bool bAllPartyMembers, bool bAllPlayers, bool bAllowOverrideHigher) throws NotInContextException;
    idempotent void addToParty(NWObject oPC, NWObject oPartyLeader) throws NotInContextException;
    void adjustAlignment(NWObject oSubject, Alignment tAlignment, int nShift, bool bAllPartyMembers) throws NotInContextException;
    void adjustReputation(NWObject oTarget, NWObject oSourceFactionMember, int nAdjustment) throws NotInContextException;
    idempotent void ambientSoundChangeDay(NWObject oArea, int nTrack) throws NotInContextException;
    idempotent void ambientSoundChangeNight(NWObject oArea, int nTrack) throws NotInContextException;
    idempotent void ambientSoundPlay(NWObject oArea) throws NotInContextException;
    idempotent void ambientSoundSetDayVolume(NWObject oArea, int nVolume) throws NotInContextException;
    idempotent void ambientSoundSetNightVolume(NWObject oArea, int nVolume) throws NotInContextException;
    idempotent void ambientSoundStop(NWObject oArea) throws NotInContextException;
    idempotent NWVector angleToVector(double fAngle) throws NotInContextException;
    void applyEffectAtLocation(DurationType tDurationType, NWEffect eEffect, NWLocation lLocation, double fDuration) throws NotInContextException, InvalidEffectException;
    void applyEffectToObject(DurationType tDurationType, NWEffect eEffect, NWObject oTarget, double fDuration) throws NotInContextException, InvalidEffectException;
    NWItemProperty badBadReplaceMeThisDoesNothing() throws NotInContextException;
    int beginConversation(string sResRef, NWObject oObjectToDialog) throws NotInContextException;
    void blackScreen(NWObject oCreature) throws NotInContextException;
    void bootPC(NWObject oPlayer) throws NotInContextException;
    void changeFaction(NWObject oObjectToChangeFaction, NWObject oMemberOfFactionToJoin) throws NotInContextException;
    void changeToStandardFaction(NWObject oCreatureToChange, StandardFaction tStandardFaction) throws NotInContextException;
    void clearAllActions(bool bClearCombatState) throws NotInContextException;
    void clearPersonalReputation(NWObject oTarget, NWObject oSource) throws NotInContextException;
    NWObject copyItem(NWObject oItem, NWObject oTargetInventory, bool bCopyVars) throws NotInContextException;
    NWObject copyItemAndModify(NWObject oItem, int nType, int nIndex, int nNewValue, bool bCopyVars) throws NotInContextException;
    NWObject copyObject(NWObject oSource, NWLocation locLocation, NWObject oOwner, string sNewTag) throws NotInContextException;
    NWObject createItemOnObject(string sItemTemplate, NWObject oTarget, int nStackSize, string sNewTag) throws NotInContextException;
    NWObject createObject(ObjectType tObjectType, string sTemplate, NWLocation lLocation, bool bUseAppearAnimation, string sNewTag) throws NotInContextException;
    NWObject createTrapAtLocation(TrapType tTrapType, NWLocation lLocation, double fSize, string sTag, StandardFaction tStandardFaction, string sOnDisarmScript, string sOnTrapTriggeredScript) throws NotInContextException;
    void createTrapOnObject(TrapType tTrapType, NWObject oObject, StandardFaction tStandardFaction, string sOnDisarmScript, string sOnTrapTriggeredScript) throws NotInContextException;
    idempotent void dayToNight(NWObject oPlayer, double fTransitionTime) throws NotInContextException;
    void decrementRemainingFeatUses(NWObject oCreature, int nFeat) throws NotInContextException;
    void decrementRemainingSpellUses(NWObject oCreature, int nSpell) throws NotInContextException;
    idempotent void deleteCampaignVariable(string sCampaignName, string sVarName, NWObject oPlayer) throws NotInContextException;
    idempotent void deleteLocalFloat(NWObject oObject, string sVarName) throws NotInContextException;
    idempotent void deleteLocalInt(NWObject oObject, string sVarName) throws NotInContextException;
    idempotent void deleteLocalLocation(NWObject oObject, string sVarName) throws NotInContextException;
    idempotent void deleteLocalObject(NWObject oObject, string sVarName) throws NotInContextException;
    idempotent void deleteLocalString(NWObject oObject, string sVarName) throws NotInContextException;
    idempotent void destroyCampaignDatabase(string sCampaignName) throws NotInContextException;
    void destroyObject(NWObject oDestroy, double fDelay) throws NotInContextException;
    idempotent void doDoorAction(NWObject oTargetDoor, DoorAction tDoorAction) throws NotInContextException;
    idempotent void doPlaceableObjectAction(NWObject oPlaceable, PlaceableAction tPlaceableAction) throws NotInContextException;
    idempotent void doSinglePlayerAutoSave() throws NotInContextException;
    idempotent void doWhirlwindAttack(bool bDisplayFeedback, bool bImproved) throws NotInContextException;
    idempotent NWEffect effectACDecrease(int nValue, ACModifyType tACModifyType, DamageType tDamageType) throws NotInContextException;
    idempotent NWEffect effectACIncrease(int nValue, ACModifyType tACModifyType, DamageType tDamageType) throws NotInContextException;
    idempotent NWEffect effectAbilityDecrease(Ability tAbility, int nModifyBy) throws NotInContextException;
    idempotent NWEffect effectAbilityIncrease(Ability tAbility, int nModifyBy) throws NotInContextException;
    idempotent NWEffect effectAppear(int nAnimation) throws NotInContextException;
    idempotent NWEffect effectAreaOfEffect(int nAreaEffectId, string sOnEnterScript, string sHeartbeatScript, string sOnExitScript) throws NotInContextException;
    idempotent NWEffect effectAttackDecrease(int nPenalty, AttackBonus tAttackBonus) throws NotInContextException;
    idempotent NWEffect effectAttackIncrease(int nBonus, AttackBonus tAttackBonus) throws NotInContextException;
    idempotent NWEffect effectBeam(int nBeamVisualEffect, NWObject oEffector, CreaturePart tCreaturePart, bool bMissEffect) throws NotInContextException;
    idempotent NWEffect effectBlindness() throws NotInContextException;
    idempotent NWEffect effectCharmed() throws NotInContextException;
    idempotent NWEffect effectConcealment(int nPercentage, MissChanceType tMissChanceType) throws NotInContextException;
    idempotent NWEffect effectConfused() throws NotInContextException;
    idempotent NWEffect effectCurse(int nStrMod, int nDexMod, int nConMod, int nIntMod, int nWisMod, int nChaMod) throws NotInContextException;
    idempotent NWEffect effectCutsceneDominated() throws NotInContextException;
    idempotent NWEffect effectCutsceneGhost() throws NotInContextException;
    idempotent NWEffect effectCutsceneImmobilize() throws NotInContextException;
    idempotent NWEffect effectCutsceneParalyze() throws NotInContextException;
    idempotent NWEffect effectDamage(int nDamageAmount, DamageType tDamageType, DamagePower tDamagePower) throws NotInContextException;
    idempotent NWEffect effectDamageDecrease(int nPenalty, DamageType tDamageType) throws NotInContextException;
    idempotent NWEffect effectDamageImmunityDecrease(DamageType tDamageType, int nPercentImmunity) throws NotInContextException;
    idempotent NWEffect effectDamageImmunityIncrease(DamageType tDamageType, int nPercentImmunity) throws NotInContextException;
    idempotent NWEffect effectDamageIncrease(int nBonus, DamageType tDamageType) throws NotInContextException;
    idempotent NWEffect effectDamageReduction(int nAmount, DamagePower tDamagePower, int nLimit) throws NotInContextException;
    idempotent NWEffect effectDamageResistance(DamageType tDamageType, int nAmount, int nLimit) throws NotInContextException;
    idempotent NWEffect effectDamageShield(int nDamageAmount, int nRandomAmount, DamageType tDamageType) throws NotInContextException;
    idempotent NWEffect effectDarkness() throws NotInContextException;
    idempotent NWEffect effectDazed() throws NotInContextException;
    idempotent NWEffect effectDeaf() throws NotInContextException;
    idempotent NWEffect effectDeath(bool bSpectacularDeath, bool bDisplayFeedback) throws NotInContextException;
    idempotent NWEffect effectDisappear(int nAnimation) throws NotInContextException;
    idempotent NWEffect effectDisappearAppear(NWLocation lLocation, int nAnimation) throws NotInContextException;
    idempotent NWEffect effectDisease(int nDiseaseType) throws NotInContextException;
    idempotent NWEffect effectDispelMagicAll(int nCasterLevel) throws NotInContextException;
    idempotent NWEffect effectDispelMagicBest(int nCasterLevel) throws NotInContextException;
    idempotent NWEffect effectDominated() throws NotInContextException;
    idempotent NWEffect effectEntangle() throws NotInContextException;
    idempotent NWEffect effectEthereal() throws NotInContextException;
    idempotent NWEffect effectFrightened() throws NotInContextException;
    idempotent NWEffect effectHaste() throws NotInContextException;
    idempotent NWEffect effectHeal(int nDamageToHeal) throws NotInContextException;
    idempotent NWEffect effectHitPointChangeWhenDying(double fHitPointChangePerRound) throws NotInContextException;
    idempotent NWEffect effectImmunity(ImmunityType tImmunityType) throws NotInContextException;
    idempotent NWEffect effectInvisibility(int nInvisibilityType) throws NotInContextException;
    idempotent NWEffect effectKnockdown() throws NotInContextException;
    idempotent NWEffect effectLinkEffects(NWEffect eChildEffect, NWEffect eParentEffect) throws NotInContextException, InvalidEffectException;
    idempotent NWEffect effectMissChance(int nPercentage, MissChanceType tMissChanceType) throws NotInContextException;
    idempotent NWEffect effectModifyAttacks(int nAttacks) throws NotInContextException;
    idempotent NWEffect effectMovementSpeedDecrease(int nPercentChange) throws NotInContextException;
    idempotent NWEffect effectMovementSpeedIncrease(int nPercentChange) throws NotInContextException;
    idempotent NWEffect effectNegativeLevel(int nNumLevels, bool bHPBonus) throws NotInContextException;
    idempotent NWEffect effectParalyze() throws NotInContextException;
    idempotent NWEffect effectPetrify() throws NotInContextException;
    idempotent NWEffect effectPoison(int nPoisonType) throws NotInContextException;
    idempotent NWEffect effectPolymorph(int nPolymorphSelection, bool bLocked) throws NotInContextException;
    idempotent NWEffect effectRegenerate(int nAmount, double fIntervalSeconds) throws NotInContextException;
    idempotent NWEffect effectResurrection() throws NotInContextException;
    idempotent NWEffect effectSanctuary(int nDifficultyClass) throws NotInContextException;
    idempotent NWEffect effectSavingThrowDecrease(int nSave, int nValue, SaveType tSaveType) throws NotInContextException;
    idempotent NWEffect effectSavingThrowIncrease(int nSave, int nValue, SaveType tSaveType) throws NotInContextException;
    idempotent NWEffect effectSeeInvisible() throws NotInContextException;
    idempotent NWEffect effectSilence() throws NotInContextException;
    idempotent NWEffect effectSkillDecrease(int nSkill, int nValue) throws NotInContextException;
    idempotent NWEffect effectSkillIncrease(int nSkill, int nValue) throws NotInContextException;
    idempotent NWEffect effectSleep() throws NotInContextException;
    idempotent NWEffect effectSlow() throws NotInContextException;
    idempotent NWEffect effectSpellFailure(int nPercent, SpellSchool tSpellSchool) throws NotInContextException;
    idempotent NWEffect effectSpellImmunity(int nImmunityToSpell) throws NotInContextException;
    idempotent NWEffect effectSpellLevelAbsorption(int nMaxSpellLevelAbsorbed, int nTotalSpellLevelsAbsorbed, SpellSchool tSpellSchool) throws NotInContextException;
    idempotent NWEffect effectSpellResistanceDecrease(int nValue) throws NotInContextException;
    idempotent NWEffect effectSpellResistanceIncrease(int nValue) throws NotInContextException;
    idempotent NWEffect effectStunned() throws NotInContextException;
    idempotent NWEffect effectSummonCreature(string sCreatureResref, int nVisualEffectId, double fDelaySeconds, bool bUseAppearAnimation) throws NotInContextException;
    idempotent NWEffect effectSwarm(bool bLooping, string sCreatureTemplate1, string sCreatureTemplate2, string sCreatureTemplate3, string sCreatureTemplate4) throws NotInContextException;
    idempotent NWEffect effectTemporaryHitpoints(int nHitPoints) throws NotInContextException;
    idempotent NWEffect effectTimeStop() throws NotInContextException;
    idempotent NWEffect effectTrueSeeing() throws NotInContextException;
    idempotent NWEffect effectTurnResistanceDecrease(int nHitDice) throws NotInContextException;
    idempotent NWEffect effectTurnResistanceIncrease(int nHitDice) throws NotInContextException;
    idempotent NWEffect effectTurned() throws NotInContextException;
    idempotent NWEffect effectUltravision() throws NotInContextException;
    idempotent NWEffect effectVisualEffect(int nVisualEffectId, bool bMissEffect) throws NotInContextException;
    void endGame(string sEndMovie) throws NotInContextException;
    void executeScript(string sScript, NWObject oTarget) throws NotInContextException;
    void exploreAreaForPlayer(NWObject oArea, NWObject oPlayer, bool bExplored) throws NotInContextException;
    void exportAllCharacters() throws NotInContextException;
    void exportSingleCharacter(NWObject oPlayer) throws NotInContextException;
    idempotent NWEffect extraordinaryEffect(NWEffect eEffect) throws NotInContextException, InvalidEffectException;
    idempotent void fadeFromBlack(NWObject oCreature, double fSpeed) throws NotInContextException;
    idempotent void fadeToBlack(NWObject oCreature, double fSpeed) throws NotInContextException;
    void floatingTextStrRefOnCreature(int nStrRefToDisplay, NWObject oCreatureToFloatAbove, bool bBroadcastToFaction) throws NotInContextException;
    void floatingTextStringOnCreature(string sStringToDisplay, NWObject oCreatureToFloatAbove, bool bBroadcastToFaction) throws NotInContextException;
    void forceRest(NWObject oCreature) throws NotInContextException;
    SavingThrowResult fortitudeSave(NWObject oCreature, int nDC, SaveType tSaveType, NWObject oSaveVersus) throws NotInContextException;
    idempotent string get2DAString(string s2DA, string sColumn, int nRow) throws NotInContextException;
    idempotent int getAC(NWObject oObject) throws NotInContextException;
    idempotent AILevel getAILevel(NWObject oTarget) throws NotInContextException;
    idempotent int getAbilityModifier(Ability tAbility, NWObject oCreature) throws NotInContextException;
    idempotent int getAbilityScore(NWObject oCreature, Ability tAbility, bool bBaseAbilityScore) throws NotInContextException;
    idempotent bool getActionMode(NWObject oCreature, ActionMode tActionMode) throws NotInContextException;
    idempotent int getAge(NWObject oCreature) throws NotInContextException;
    idempotent Alignment getAlignmentGoodEvil(NWObject oCreature) throws NotInContextException;
    idempotent Alignment getAlignmentLawChaos(NWObject oCreature) throws NotInContextException;
    idempotent int getAnimalCompanionCreatureType(NWObject oCreature) throws NotInContextException;
    idempotent string getAnimalCompanionName(NWObject oTarget) throws NotInContextException;
    idempotent int getAppearanceType(NWObject oCreature) throws NotInContextException;
    idempotent int getArcaneSpellFailure(NWObject oCreature) throws NotInContextException;
    idempotent NWObject getArea(NWObject oTarget) throws NotInContextException;
    idempotent NWObject getAreaOfEffectCreator(NWObject oAreaOfEffectObject) throws NotInContextException;
    idempotent int getAreaSize(int nAreaDimension, NWObject oArea) throws NotInContextException;
    idempotent NWObject getAssociate(AssociateType tAssociateType, NWObject oMaster, int nTh) throws NotInContextException;
    idempotent AssociateType getAssociateType(NWObject oAssociate) throws NotInContextException;
    idempotent NWObject getAttackTarget(NWObject oCreature) throws NotInContextException;
    idempotent NWObject getAttemptedAttackTarget() throws NotInContextException;
    idempotent NWObject getAttemptedSpellTarget() throws NotInContextException;
    idempotent int getBaseAttackBonus(NWObject oCreature) throws NotInContextException;
    idempotent int getBaseItemType(NWObject oItem) throws NotInContextException;
    idempotent NWObject getBlockingDoor() throws NotInContextException;
    idempotent int getCalendarDay() throws NotInContextException;
    idempotent int getCalendarMonth() throws NotInContextException;
    idempotent int getCalendarYear() throws NotInContextException;
    idempotent double getCampaignFloat(string sCampaignName, string sVarName, NWObject oPlayer) throws NotInContextException;
    idempotent int getCampaignInt(string sCampaignName, string sVarName, NWObject oPlayer) throws NotInContextException;
    idempotent NWLocation getCampaignLocation(string sCampaignName, string sVarName, NWObject oPlayer) throws NotInContextException;
    idempotent string getCampaignString(string sCampaignName, string sVarName, NWObject oPlayer) throws NotInContextException;
    idempotent NWVector getCampaignVector(string sCampaignName, string sVarName, NWObject oPlayer) throws NotInContextException;
    idempotent int getCasterLevel(NWObject oCreature) throws NotInContextException;
    idempotent double getChallengeRating(NWObject oCreature) throws NotInContextException;
    idempotent int getClassByPosition(int nClassPosition, NWObject oCreature) throws NotInContextException;
    idempotent NWObject getClickingObject() throws NotInContextException;
    idempotent int getColor(NWObject oObject, int nColorChannel) throws NotInContextException;
    idempotent bool getCommandable(NWObject oTarget) throws NotInContextException;
    idempotent int getCreatureBodyPart(CreaturePart tCreaturePart, NWObject oCreature) throws NotInContextException;
    idempotent CreatureSize getCreatureSize(NWObject oCreature) throws NotInContextException;
    idempotent int getCreatureStartingPackage(NWObject oCreature) throws NotInContextException;
    idempotent int getCreatureTailType(NWObject oCreature) throws NotInContextException;
    idempotent int getCreatureWingType(NWObject oCreature) throws NotInContextException;
    idempotent Action getCurrentAction(NWObject oObject) throws NotInContextException;
    idempotent int getCurrentHitPoints(NWObject oObject) throws NotInContextException;
    idempotent double getCutsceneCameraMoveRate(NWObject oCreature) throws NotInContextException;
    idempotent bool getCutsceneMode(NWObject oCreature) throws NotInContextException;
    idempotent int getDamageDealtByType(DamageType tDamageType) throws NotInContextException;
    idempotent int getDefensiveCastingMode(NWObject oCreature) throws NotInContextException;
    idempotent string getDeity(NWObject oCreature) throws NotInContextException;
    idempotent string getDescription(NWObject oObject, bool bOriginalDescription, bool bIdentifiedDescription) throws NotInContextException;
    idempotent int getDetectMode(NWObject oCreature) throws NotInContextException;
    idempotent double getDialogSoundLength(int nStrRef) throws NotInContextException;
    idempotent double getDistanceBetween(NWObject oObjectA, NWObject oObjectB) throws NotInContextException;
    idempotent double getDistanceBetweenLocations(NWLocation lLocationA, NWLocation lLocationB) throws NotInContextException;
    idempotent double getDistanceToObject(NWObject oObject) throws NotInContextException;
    idempotent bool getDroppableFlag(NWObject oItem) throws NotInContextException;
    idempotent NWObject getEffectCreator(NWEffect eEffect) throws NotInContextException, InvalidEffectException;
    idempotent DurationType getEffectDurationType(NWEffect eEffect) throws NotInContextException, InvalidEffectException;
    idempotent int getEffectSpellId(NWEffect eSpellEffect) throws NotInContextException, InvalidEffectException;
    idempotent EffectSubType getEffectSubType(NWEffect eEffect) throws NotInContextException, InvalidEffectException;
    idempotent EffectType getEffectType(NWEffect eEffect) throws NotInContextException, InvalidEffectException;
    idempotent int getEncounterActive(NWObject oEncounter) throws NotInContextException;
    idempotent int getEncounterDifficulty(NWObject oEncounter) throws NotInContextException;
    idempotent int getEncounterSpawnsCurrent(NWObject oEncounter) throws NotInContextException;
    idempotent int getEncounterSpawnsMax(NWObject oEncounter) throws NotInContextException;
    idempotent NWObject getEnteringObject() throws NotInContextException;
    idempotent NWObject getExitingObject() throws NotInContextException;
    idempotent double getFacing(NWObject oTarget) throws NotInContextException;
    idempotent int getFactionAverageGoodEvilAlignment(NWObject oFactionMember) throws NotInContextException;
    idempotent int getFactionAverageLawChaosAlignment(NWObject oFactionMember) throws NotInContextException;
    idempotent int getFactionAverageLevel(NWObject oFactionMember) throws NotInContextException;
    idempotent int getFactionAverageReputation(NWObject oSourceFactionMember, NWObject oTarget) throws NotInContextException;
    idempotent int getFactionAverageXP(NWObject oFactionMember) throws NotInContextException;
    idempotent NWObject getFactionBestAC(NWObject oFactionMember, bool bMustBeVisible) throws NotInContextException;
    idempotent bool getFactionEqual(NWObject oFirstObject, NWObject oSecondObject) throws NotInContextException;
    idempotent int getFactionGold(NWObject oFactionMember) throws NotInContextException;
    idempotent NWObject getFactionLeader(NWObject oMemberOfFaction) throws NotInContextException;
    idempotent NWObject getFactionLeastDamagedMember(NWObject oFactionMember, bool bMustBeVisible) throws NotInContextException;
    idempotent NWObject getFactionMostDamagedMember(NWObject oFactionMember, bool bMustBeVisible) throws NotInContextException;
    idempotent int getFactionMostFrequentClass(NWObject oFactionMember) throws NotInContextException;
    idempotent NWObject getFactionStrongestMember(NWObject oFactionMember, bool bMustBeVisible) throws NotInContextException;
    idempotent NWObject getFactionWeakestMember(NWObject oFactionMember, bool bMustBeVisible) throws NotInContextException;
    idempotent NWObject getFactionWorstAC(NWObject oFactionMember, bool bMustBeVisible) throws NotInContextException;
    idempotent int getFamiliarCreatureType(NWObject oCreature) throws NotInContextException;
    idempotent string getFamiliarName(NWObject oCreature) throws NotInContextException;
    idempotent int getFogAmount(int nFogType, NWObject oArea) throws NotInContextException;
    idempotent int getFogColor(int nFogType, NWObject oArea) throws NotInContextException;
    idempotent int getFootstepType(NWObject oCreature) throws NotInContextException;
    idempotent int getFortitudeSavingThrow(NWObject oTarget) throws NotInContextException;
    idempotent int getGameDifficulty() throws NotInContextException;
    idempotent Gender getGender(NWObject oCreature) throws NotInContextException;
    idempotent NWObject getGoingToBeAttackedBy(NWObject oTarget) throws NotInContextException;
    idempotent int getGold(NWObject oTarget) throws NotInContextException;
    idempotent int getGoldPieceValue(NWObject oItem) throws NotInContextException;
    idempotent int getGoodEvilValue(NWObject oCreature) throws NotInContextException;
    idempotent int getHardness(NWObject oObject) throws NotInContextException;
    idempotent bool getHasFeat(int nFeat, NWObject oCreature) throws NotInContextException;
    idempotent bool getHasFeatEffect(int nFeat, NWObject oObject) throws NotInContextException;
    idempotent bool getHasInventory(NWObject oObject) throws NotInContextException;
    idempotent bool getHasSkill(int nSkill, NWObject oCreature) throws NotInContextException;
    idempotent bool getHasSpell(int nSpell, NWObject oCreature) throws NotInContextException;
    idempotent bool getHasSpellEffect(int nSpell, NWObject oObject) throws NotInContextException;
    idempotent NWObject getHenchman(NWObject oMaster, int nNth) throws NotInContextException;
    idempotent int getHitDice(NWObject oCreature) throws NotInContextException;
    idempotent bool getIdentified(NWObject oItem) throws NotInContextException;
    idempotent bool getImmortal(NWObject oTarget) throws NotInContextException;
    idempotent bool getInfiniteFlag(NWObject oItem) throws NotInContextException;
    idempotent NWObject getInventoryDisturbItem() throws NotInContextException;
    idempotent int getInventoryDisturbType() throws NotInContextException;
    idempotent bool getIsAreaAboveGround(NWObject oArea) throws NotInContextException;
    idempotent bool getIsAreaInterior(NWObject oArea) throws NotInContextException;
    idempotent bool getIsAreaNatural(NWObject oArea) throws NotInContextException;
    idempotent bool getIsCreatureDisarmable(NWObject oCreature) throws NotInContextException;
    idempotent bool getIsDM(NWObject oCreature) throws NotInContextException;
    idempotent bool getIsDMPossessed(NWObject oCreature) throws NotInContextException;
    idempotent bool getIsDawn() throws NotInContextException;
    idempotent bool getIsDay() throws NotInContextException;
    idempotent bool getIsDead(NWObject oCreature) throws NotInContextException;
    idempotent bool getIsDoorActionPossible(NWObject oTargetDoor, DoorAction tDoorAction) throws NotInContextException;
    idempotent bool getIsDusk() throws NotInContextException;
    idempotent bool getIsEffectValid(NWEffect eEffect) throws NotInContextException, InvalidEffectException;
    idempotent bool getIsEncounterCreature(NWObject oCreature) throws NotInContextException;
    idempotent bool getIsEnemy(NWObject oTarget, NWObject oSource) throws NotInContextException;
    idempotent bool getIsFriend(NWObject oTarget, NWObject oSource) throws NotInContextException;
    idempotent bool getIsImmune(NWObject oCreature, ImmunityType tImmunityType, NWObject oVersus) throws NotInContextException;
    idempotent bool getIsInCombat(NWObject oCreature) throws NotInContextException;
    idempotent bool getIsInSubArea(NWObject oCreature, NWObject oSubArea) throws NotInContextException;
    idempotent bool getIsItemPropertyValid(NWItemProperty ipProperty) throws NotInContextException, InvalidItemPropertyException;
    idempotent bool getIsListening(NWObject oObject) throws NotInContextException;
    idempotent bool getIsNeutral(NWObject oTarget, NWObject oSource) throws NotInContextException;
    idempotent bool getIsNight() throws NotInContextException;
    idempotent bool getIsObjectValid(NWObject oObject) throws NotInContextException;
    idempotent bool getIsOpen(NWObject oObject) throws NotInContextException;
    idempotent bool getIsPC(NWObject oCreature) throws NotInContextException;
    idempotent bool getIsPlaceableObjectActionPossible(NWObject oPlaceable, PlaceableAction tPlaceableAction) throws NotInContextException;
    idempotent bool getIsPlayableRacialType(NWObject oCreature) throws NotInContextException;
    idempotent bool getIsPossessedFamiliar(NWObject oCreature) throws NotInContextException;
    idempotent bool getIsReactionTypeFriendly(NWObject oTarget, NWObject oSource) throws NotInContextException;
    idempotent bool getIsReactionTypeHostile(NWObject oTarget, NWObject oSource) throws NotInContextException;
    idempotent bool getIsReactionTypeNeutral(NWObject oTarget, NWObject oSource) throws NotInContextException;
    idempotent bool getIsResting(NWObject oCreature) throws NotInContextException;
    idempotent bool getIsSkillSuccessful(NWObject oTarget, int nSkill, int nDifficulty) throws NotInContextException;
    idempotent bool getIsTrapped(NWObject oObject) throws NotInContextException;
    idempotent bool getIsWeaponEffective(NWObject oVersus, bool bOffHand) throws NotInContextException;
    idempotent int getItemACValue(NWObject oItem) throws NotInContextException;
    idempotent NWObject getItemActivated() throws NotInContextException;
    idempotent NWObject getItemActivatedTarget() throws NotInContextException;
    idempotent NWLocation getItemActivatedTargetLocation() throws NotInContextException;
    idempotent NWObject getItemActivator() throws NotInContextException;
    idempotent int getItemAppearance(NWObject oItem, int nType, int nIndex) throws NotInContextException;
    idempotent int getItemCharges(NWObject oItem) throws NotInContextException;
    idempotent bool getItemCursedFlag(NWObject oItem) throws NotInContextException;
    idempotent bool getItemHasItemProperty(NWObject oItem, int nProperty) throws NotInContextException;
    idempotent NWObject getItemInSlot(InventorySlot tInventorySlot, NWObject oCreature) throws NotInContextException;
    idempotent NWObject getItemPossessedBy(NWObject oCreature, string sItemTag) throws NotInContextException;
    idempotent NWObject getItemPossessor(NWObject oItem) throws NotInContextException;
    idempotent int getItemPropertyCostTable(NWItemProperty iProp) throws NotInContextException, InvalidItemPropertyException;
    idempotent int getItemPropertyCostTableValue(NWItemProperty iProp) throws NotInContextException, InvalidItemPropertyException;
    idempotent DurationType getItemPropertyDurationType(NWItemProperty ip) throws NotInContextException, InvalidItemPropertyException;
    idempotent int getItemPropertyParam1(NWItemProperty iProp) throws NotInContextException, InvalidItemPropertyException;
    idempotent int getItemPropertyParam1Value(NWItemProperty iProp) throws NotInContextException, InvalidItemPropertyException;
    idempotent int getItemPropertySubType(NWItemProperty iProperty) throws NotInContextException, InvalidItemPropertyException;
    idempotent int getItemPropertyType(NWItemProperty ip) throws NotInContextException, InvalidItemPropertyException;
    idempotent int getItemStackSize(NWObject oItem) throws NotInContextException;
    idempotent int getJournalQuestExperience(string szPlotID) throws NotInContextException;
    idempotent string getKeyRequiredFeedback(NWObject oObject) throws NotInContextException;
    idempotent AssociateCommand getLastAssociateCommand(NWObject oAssociate) throws NotInContextException;
    idempotent CombatMode getLastAttackMode(NWObject oCreature) throws NotInContextException;
    idempotent SpecialAttack getLastAttackType(NWObject oCreature) throws NotInContextException;
    idempotent NWObject getLastAttacker(NWObject oAttackee) throws NotInContextException;
    idempotent NWObject getLastClosedBy() throws NotInContextException;
    idempotent NWObject getLastDamager(NWObject oObject) throws NotInContextException;
    idempotent NWObject getLastDisarmed() throws NotInContextException;
    idempotent NWObject getLastDisturbed() throws NotInContextException;
    idempotent NWObject getLastHostileActor(NWObject oVictim) throws NotInContextException;
    idempotent NWObject getLastKiller() throws NotInContextException;
    idempotent NWObject getLastLocked() throws NotInContextException;
    idempotent NWObject getLastOpenedBy() throws NotInContextException;
    idempotent NWObject getLastPCRested() throws NotInContextException;
    idempotent NWObject getLastPCToCancelCutscene() throws NotInContextException;
    idempotent NWObject getLastPerceived() throws NotInContextException;
    idempotent bool getLastPerceptionHeard() throws NotInContextException;
    idempotent bool getLastPerceptionInaudible() throws NotInContextException;
    idempotent bool getLastPerceptionSeen() throws NotInContextException;
    idempotent bool getLastPerceptionVanished() throws NotInContextException;
    idempotent NWObject getLastPlayerDied() throws NotInContextException;
    idempotent NWObject getLastPlayerDying() throws NotInContextException;
    idempotent NWObject getLastRespawnButtonPresser() throws NotInContextException;
    idempotent int getLastRestEventType() throws NotInContextException;
    idempotent NWObject getLastSpeaker() throws NotInContextException;
    idempotent int getLastSpell() throws NotInContextException;
    idempotent int getLastSpellCastClass() throws NotInContextException;
    idempotent NWObject getLastSpellCaster() throws NotInContextException;
    idempotent bool getLastSpellHarmful() throws NotInContextException;
    idempotent NWObject getLastTrapDetected(NWObject oTarget) throws NotInContextException;
    idempotent NWObject getLastUnlocked() throws NotInContextException;
    idempotent NWObject getLastUsedBy() throws NotInContextException;
    idempotent NWObject getLastWeaponUsed(NWObject oCreature) throws NotInContextException;
    idempotent int getLawChaosValue(NWObject oCreature) throws NotInContextException;
    idempotent int getLevelByClass(int nClassType, NWObject oCreature) throws NotInContextException;
    idempotent int getLevelByPosition(int nClassPosition, NWObject oCreature) throws NotInContextException;
    idempotent int getListenPatternNumber() throws NotInContextException;
    idempotent double getLocalFloat(NWObject oObject, string sVarName) throws NotInContextException;
    idempotent int getLocalInt(NWObject oObject, string sVarName) throws NotInContextException;
    idempotent NWLocation getLocalLocation(NWObject oObject, string sVarName) throws NotInContextException;
    idempotent NWObject getLocalObject(NWObject oObject, string sVarName) throws NotInContextException;
    idempotent string getLocalString(NWObject oObject, string sVarName) throws NotInContextException;
    idempotent NWLocation getLocation(NWObject oObject) throws NotInContextException;
    idempotent bool getLockKeyRequired(NWObject oObject) throws NotInContextException;
    idempotent string getLockKeyTag(NWObject oObject) throws NotInContextException;
    idempotent int getLockLockDC(NWObject oObject) throws NotInContextException;
    idempotent bool getLockLockable(NWObject oObject) throws NotInContextException;
    idempotent int getLockUnlockDC(NWObject oObject) throws NotInContextException;
    idempotent bool getLocked(NWObject oTarget) throws NotInContextException;
    idempotent bool getLootable(NWObject oCreature) throws NotInContextException;
    idempotent NWObject getMaster(NWObject oAssociate) throws NotInContextException;
    idempotent string getMatchedSubstring(int nString) throws NotInContextException;
    idempotent int getMatchedSubstringsCount() throws NotInContextException;
    idempotent int getMaxHenchmen() throws NotInContextException;
    idempotent int getMaxHitPoints(NWObject oObject) throws NotInContextException;
    idempotent MetaMagic getMetaMagicFeat() throws NotInContextException;
    idempotent NWObject getModule() throws NotInContextException;
    idempotent NWObject getModuleItemAcquired() throws NotInContextException;
    idempotent NWObject getModuleItemAcquiredBy() throws NotInContextException;
    idempotent NWObject getModuleItemAcquiredFrom() throws NotInContextException;
    idempotent int getModuleItemAcquiredStackSize() throws NotInContextException;
    idempotent NWObject getModuleItemLost() throws NotInContextException;
    idempotent NWObject getModuleItemLostBy() throws NotInContextException;
    idempotent string getModuleName() throws NotInContextException;
    idempotent int getModuleXPScale() throws NotInContextException;
    idempotent int getMovementRate(NWObject oCreature) throws NotInContextException;
    idempotent string getName(NWObject oObject, bool bOriginalName) throws NotInContextException;
    idempotent NWObject getNearestCreature(int nFirstCriteriaType, int nFirstCriteriaValue, NWObject oTarget, int nNth, int nSecondCriteriaType, int nSecondCriteriaValue, int nThirdCriteriaType, int nThirdCriteriaValue) throws NotInContextException;
    idempotent NWObject getNearestCreatureToLocation(int nFirstCriteriaType, int nFirstCriteriaValue, NWLocation lLocation, int nNth, int nSecondCriteriaType, int nSecondCriteriaValue, int nThirdCriteriaType, int nThirdCriteriaValue) throws NotInContextException;
    idempotent NWObject getNearestObject(ObjectType tObjectType, NWObject oTarget, int nNth) throws NotInContextException;
    idempotent NWObject getNearestObjectByTag(string sTag, NWObject oTarget, int nNth) throws NotInContextException;
    idempotent NWObject getNearestObjectToLocation(ObjectType tObjectType, NWLocation lLocation, int nNth) throws NotInContextException;
    idempotent NWObject getNearestTrapToObject(NWObject oTarget, bool bTrapDetected) throws NotInContextException;
    idempotent int getNumStackedItems(NWObject oItem) throws NotInContextException;
    idempotent NWObject getObjectByTag(string sTag, int nNth) throws NotInContextException;
    idempotent bool getObjectHeard(NWObject oTarget, NWObject oSource) throws NotInContextException;
    idempotent bool getObjectSeen(NWObject oTarget, NWObject oSource) throws NotInContextException;
    idempotent ObjectType getObjectType(NWObject oTarget) throws NotInContextException;
    idempotent string getPCChatMessage() throws NotInContextException;
    idempotent NWObject getPCChatSpeaker() throws NotInContextException;
    idempotent int getPCChatVolume() throws NotInContextException;
    idempotent string getPCIPAddress(NWObject oPlayer) throws NotInContextException;
    idempotent NWObject getPCItemLastEquipped() throws NotInContextException;
    idempotent NWObject getPCItemLastEquippedBy() throws NotInContextException;
    idempotent NWObject getPCItemLastUnequipped() throws NotInContextException;
    idempotent NWObject getPCItemLastUnequippedBy() throws NotInContextException;
    idempotent NWObject getPCLevellingUp() throws NotInContextException;
    idempotent string getPCPlayerName(NWObject oPlayer) throws NotInContextException;
    idempotent string getPCPublicCDKey(NWObject oPlayer, bool bSinglePlayerCDKey) throws NotInContextException;
    idempotent NWObject getPCSpeaker() throws NotInContextException;
    idempotent PhenoType getPhenoType(NWObject oCreature) throws NotInContextException;
    idempotent bool getPickpocketableFlag(NWObject oItem) throws NotInContextException;
    idempotent int getPlaceableIllumination(NWObject oPlaceable) throws NotInContextException;
    idempotent NWObject getPlaceableLastClickedBy() throws NotInContextException;
    idempotent bool getPlotFlag(NWObject oTarget) throws NotInContextException;
    idempotent int getPortraitId(NWObject oTarget) throws NotInContextException;
    idempotent string getPortraitResRef(NWObject oTarget) throws NotInContextException;
    idempotent NWVector getPosition(NWObject oTarget) throws NotInContextException;
    idempotent RacialType getRacialType(NWObject oCreature) throws NotInContextException;
    idempotent int getReflexAdjustedDamage(int nDamage, NWObject oTarget, int nDC, SaveType tSaveType, NWObject oSaveVersus) throws NotInContextException;
    idempotent int getReflexSavingThrow(NWObject oTarget) throws NotInContextException;
    idempotent int getReputation(NWObject oSource, NWObject oTarget) throws NotInContextException;
    idempotent string getResRef(NWObject oObject) throws NotInContextException;
    idempotent NWObject getSittingCreature(NWObject oChair) throws NotInContextException;
    idempotent int getSkillRank(int nSkill, NWObject oTarget, bool bBaseSkillRank) throws NotInContextException;
    idempotent int getSkyBox(NWObject oArea) throws NotInContextException;
    idempotent NWObject getSpellCastItem() throws NotInContextException;
    idempotent int getSpellId() throws NotInContextException;
    idempotent int getSpellResistance(NWObject oCreature) throws NotInContextException;
    idempotent int getSpellSaveDC() throws NotInContextException;
    idempotent NWLocation getSpellTargetLocation() throws NotInContextException;
    idempotent NWObject getSpellTargetObject() throws NotInContextException;
    idempotent int getStandardFactionReputation(StandardFaction tStandardFaction, NWObject oCreature) throws NotInContextException;
    idempotent NWLocation getStartingLocation() throws NotInContextException;
    idempotent int getStealthMode(NWObject oCreature) throws NotInContextException;
    idempotent bool getStolenFlag(NWObject oStolen) throws NotInContextException;
    idempotent int getStoreGold(NWObject oidStore) throws NotInContextException;
    idempotent int getStoreIdentifyCost(NWObject oidStore) throws NotInContextException;
    idempotent int getStoreMaxBuyPrice(NWObject oidStore) throws NotInContextException;
    idempotent double getStrRefSoundDuration(int nStrRef) throws NotInContextException;
    idempotent string getStringByStrRef(int nStrRef, Gender tGender) throws NotInContextException;
    idempotent string getSubRace(NWObject oTarget) throws NotInContextException;
    idempotent string getTag(NWObject oObject) throws NotInContextException;
    idempotent TileMainLightColor getTileMainLight1Color(NWLocation lTile) throws NotInContextException;
    idempotent TileMainLightColor getTileMainLight2Color(NWLocation lTile) throws NotInContextException;
    idempotent TileSourceLightColor getTileSourceLight1Color(NWLocation lTile) throws NotInContextException;
    idempotent TileSourceLightColor getTileSourceLight2Color(NWLocation lTile) throws NotInContextException;
    idempotent string getTilesetResRef(NWObject oArea) throws NotInContextException;
    idempotent int getTimeHour() throws NotInContextException;
    idempotent int getTimeMillisecond() throws NotInContextException;
    idempotent int getTimeMinute() throws NotInContextException;
    idempotent int getTimeSecond() throws NotInContextException;
    idempotent int getTotalDamageDealt() throws NotInContextException;
    idempotent NWObject getTransitionTarget(NWObject oTransition) throws NotInContextException;
    idempotent bool getTrapActive(NWObject oTrapObject) throws NotInContextException;
    idempotent int getTrapBaseType(NWObject oTrapObject) throws NotInContextException;
    idempotent NWObject getTrapCreator(NWObject oTrapObject) throws NotInContextException;
    idempotent int getTrapDetectDC(NWObject oTrapObject) throws NotInContextException;
    idempotent bool getTrapDetectable(NWObject oTrapObject) throws NotInContextException;
    idempotent bool getTrapDetectedBy(NWObject oTrapObject, NWObject oCreature) throws NotInContextException;
    idempotent int getTrapDisarmDC(NWObject oTrapObject) throws NotInContextException;
    idempotent bool getTrapDisarmable(NWObject oTrapObject) throws NotInContextException;
    idempotent bool getTrapFlagged(NWObject oTrapObject) throws NotInContextException;
    idempotent string getTrapKeyTag(NWObject oTrapObject) throws NotInContextException;
    idempotent bool getTrapOneShot(NWObject oTrapObject) throws NotInContextException;
    idempotent bool getTrapRecoverable(NWObject oTrapObject) throws NotInContextException;
    idempotent int getTurnResistanceHD(NWObject oUndead) throws NotInContextException;
    idempotent bool getUseableFlag(NWObject oObject) throws NotInContextException;
    idempotent int getUserDefinedEventNumber() throws NotInContextException;
    idempotent NWObject getWaypointByTag(string sWaypointTag) throws NotInContextException;
    idempotent bool getWeaponRanged(NWObject oItem) throws NotInContextException;
    idempotent Weather getWeather(NWObject oArea) throws NotInContextException;
    idempotent int getWeight(NWObject oTarget) throws NotInContextException;
    idempotent int getWillSavingThrow(NWObject oTarget) throws NotInContextException;
    idempotent int getXP(NWObject oCreature) throws NotInContextException;
    void giveGoldToCreature(NWObject oCreature, int nGP) throws NotInContextException;
    void giveXPToCreature(NWObject oCreature, int nXpAmount) throws NotInContextException;
    idempotent double hoursToSeconds(int nHours) throws NotInContextException;
    void incrementRemainingFeatUses(NWObject oCreature, int nFeat) throws NotInContextException;
    idempotent bool isInConversation(NWObject oObject) throws NotInContextException;
    idempotent NWItemProperty itemPropertyACBonus(int nBonus) throws NotInContextException;
    idempotent NWItemProperty itemPropertyACBonusVsAlign(IPAlignGroup tIPAlignGroup, int nACBonus) throws NotInContextException;
    idempotent NWItemProperty itemPropertyACBonusVsDmgType(IPDamageType tIPDamageType, int nACBonus) throws NotInContextException;
    idempotent NWItemProperty itemPropertyACBonusVsRace(IPRacialType tIPRacialType, int nACBonus) throws NotInContextException;
    idempotent NWItemProperty itemPropertyACBonusVsSAlign(Alignment tAlignment, int nACBonus) throws NotInContextException;
    idempotent NWItemProperty itemPropertyAbilityBonus(Ability tAbility, int nBonus) throws NotInContextException;
    idempotent NWItemProperty itemPropertyAdditional(int nAdditionalProperty) throws NotInContextException;
    idempotent NWItemProperty itemPropertyArcaneSpellFailure(int nModLevel) throws NotInContextException;
    idempotent NWItemProperty itemPropertyAttackBonus(int nBonus) throws NotInContextException;
    idempotent NWItemProperty itemPropertyAttackBonusVsAlign(IPAlignGroup tIPAlignGroup, int nBonus) throws NotInContextException;
    idempotent NWItemProperty itemPropertyAttackBonusVsRace(IPRacialType tIPRacialType, int nBonus) throws NotInContextException;
    idempotent NWItemProperty itemPropertyAttackBonusVsSAlign(Alignment tAlignment, int nBonus) throws NotInContextException;
    idempotent NWItemProperty itemPropertyAttackPenalty(int nPenalty) throws NotInContextException;
    idempotent NWItemProperty itemPropertyBonusFeat(int nFeat) throws NotInContextException;
    idempotent NWItemProperty itemPropertyBonusLevelSpell(int nClass, int nSpellLevel) throws NotInContextException;
    idempotent NWItemProperty itemPropertyBonusSavingThrow(int nBaseSaveType, int nBonus) throws NotInContextException;
    idempotent NWItemProperty itemPropertyBonusSavingThrowVsX(int nBonusType, int nBonus) throws NotInContextException;
    idempotent NWItemProperty itemPropertyBonusSpellResistance(int nBonus) throws NotInContextException;
    idempotent NWItemProperty itemPropertyCastSpell(int nSpell, int nNumUses) throws NotInContextException;
    idempotent NWItemProperty itemPropertyContainerReducedWeight(int nContainerType) throws NotInContextException;
    idempotent NWItemProperty itemPropertyDamageBonus(IPDamageType tIPDamageType, int nDamage) throws NotInContextException;
    idempotent NWItemProperty itemPropertyDamageBonusVsAlign(IPAlignGroup tIPAlignGroup, IPDamageType tIPDamageType, int nDamage) throws NotInContextException;
    idempotent NWItemProperty itemPropertyDamageBonusVsRace(IPRacialType tIPRacialType, IPDamageType tIPDamageType, int nDamage) throws NotInContextException;
    idempotent NWItemProperty itemPropertyDamageBonusVsSAlign(Alignment tAlignment, IPDamageType tIPDamageType, int nDamage) throws NotInContextException;
    idempotent NWItemProperty itemPropertyDamageImmunity(IPDamageType tIPDamageType, int nImmuneBonus) throws NotInContextException;
    idempotent NWItemProperty itemPropertyDamagePenalty(int nPenalty) throws NotInContextException;
    idempotent NWItemProperty itemPropertyDamageReduction(int nEnhancement, int nHPSoak) throws NotInContextException;
    idempotent NWItemProperty itemPropertyDamageResistance(IPDamageType tIPDamageType, int nHPResist) throws NotInContextException;
    idempotent NWItemProperty itemPropertyDamageVulnerability(IPDamageType tIPDamageType, int nVulnerability) throws NotInContextException;
    idempotent NWItemProperty itemPropertyDarkvision() throws NotInContextException;
    idempotent NWItemProperty itemPropertyDecreaseAC(int nModifierType, int nPenalty) throws NotInContextException;
    idempotent NWItemProperty itemPropertyDecreaseAbility(Ability tAbility, int nModifier) throws NotInContextException;
    idempotent NWItemProperty itemPropertyDecreaseSkill(int nSkill, int nPenalty) throws NotInContextException;
    idempotent NWItemProperty itemPropertyEnhancementBonus(int nEnhancementBonus) throws NotInContextException;
    idempotent NWItemProperty itemPropertyEnhancementBonusVsAlign(IPAlignGroup tIPAlignGroup, int nBonus) throws NotInContextException;
    idempotent NWItemProperty itemPropertyEnhancementBonusVsRace(IPRacialType tIPRacialType, int nBonus) throws NotInContextException;
    idempotent NWItemProperty itemPropertyEnhancementBonusVsSAlign(Alignment tAlignment, int nBonus) throws NotInContextException;
    idempotent NWItemProperty itemPropertyEnhancementPenalty(int nPenalty) throws NotInContextException;
    idempotent NWItemProperty itemPropertyExtraMeleeDamageType(IPDamageType tIPDamageType) throws NotInContextException;
    idempotent NWItemProperty itemPropertyExtraRangeDamageType(IPDamageType tIPDamageType) throws NotInContextException;
    idempotent NWItemProperty itemPropertyFreeAction() throws NotInContextException;
    idempotent NWItemProperty itemPropertyHaste() throws NotInContextException;
    idempotent NWItemProperty itemPropertyHealersKit(int nModifier) throws NotInContextException;
    idempotent NWItemProperty itemPropertyHolyAvenger() throws NotInContextException;
    idempotent NWItemProperty itemPropertyImmunityMisc(IPMiscImmunityType tIPMiscImmunityType) throws NotInContextException;
    idempotent NWItemProperty itemPropertyImmunityToSpellLevel(int nLevel) throws NotInContextException;
    idempotent NWItemProperty itemPropertyImprovedEvasion() throws NotInContextException;
    idempotent NWItemProperty itemPropertyKeen() throws NotInContextException;
    idempotent NWItemProperty itemPropertyLight(int nBrightness, int nColor) throws NotInContextException;
    idempotent NWItemProperty itemPropertyLimitUseByAlign(IPAlignGroup tIPAlignGroup) throws NotInContextException;
    idempotent NWItemProperty itemPropertyLimitUseByClass(int nClass) throws NotInContextException;
    idempotent NWItemProperty itemPropertyLimitUseByRace(IPRacialType tIPRacialType) throws NotInContextException;
    idempotent NWItemProperty itemPropertyLimitUseBySAlign(Alignment tAlignment) throws NotInContextException;
    idempotent NWItemProperty itemPropertyMassiveCritical(int nDamage) throws NotInContextException;
    idempotent NWItemProperty itemPropertyMaterial(int nMaterialType) throws NotInContextException;
    idempotent NWItemProperty itemPropertyMaxRangeStrengthMod(int nModifier) throws NotInContextException;
    idempotent NWItemProperty itemPropertyMonsterDamage(int nDamage) throws NotInContextException;
    idempotent NWItemProperty itemPropertyNoDamage() throws NotInContextException;
    idempotent NWItemProperty itemPropertyOnHitCastSpell(int nSpell, int nLevel) throws NotInContextException;
    idempotent NWItemProperty itemPropertyOnHitProps(int nProperty, int nSaveDC, int nSpecial) throws NotInContextException;
    idempotent NWItemProperty itemPropertyOnMonsterHitProperties(int nProperty, int nSpecial) throws NotInContextException;
    idempotent NWItemProperty itemPropertyQuality(int nQuality) throws NotInContextException;
    idempotent NWItemProperty itemPropertyReducedSavingThrow(int nBonusType, int nPenalty) throws NotInContextException;
    idempotent NWItemProperty itemPropertyReducedSavingThrowVsX(int nBaseSaveType, int nPenalty) throws NotInContextException;
    idempotent NWItemProperty itemPropertyRegeneration(int nRegenAmount) throws NotInContextException;
    idempotent NWItemProperty itemPropertySkillBonus(int nSkill, int nBonus) throws NotInContextException;
    idempotent NWItemProperty itemPropertySpecialWalk(int nWalkType) throws NotInContextException;
    idempotent NWItemProperty itemPropertySpellImmunitySchool(IPSpellSchool tIPSpellSchool) throws NotInContextException;
    idempotent NWItemProperty itemPropertySpellImmunitySpecific(int nSpell) throws NotInContextException;
    idempotent NWItemProperty itemPropertyThievesTools(int nModifier) throws NotInContextException;
    idempotent NWItemProperty itemPropertyTrap(int nTrapLevel, IPTrapType tIPTrapType) throws NotInContextException;
    idempotent NWItemProperty itemPropertyTrueSeeing() throws NotInContextException;
    idempotent NWItemProperty itemPropertyTurnResistance(int nModifier) throws NotInContextException;
    idempotent NWItemProperty itemPropertyUnlimitedAmmo(int nAmmoDamage) throws NotInContextException;
    idempotent NWItemProperty itemPropertyVampiricRegeneration(int nRegenAmount) throws NotInContextException;
    idempotent NWItemProperty itemPropertyVisualEffect(int nEffect) throws NotInContextException;
    idempotent NWItemProperty itemPropertyWeightIncrease(int nWeight) throws NotInContextException;
    idempotent NWItemProperty itemPropertyWeightReduction(int nReduction) throws NotInContextException;
    idempotent void jumpToLocation(NWLocation lDestination) throws NotInContextException;
    idempotent void jumpToObject(NWObject oToJumpTo, bool bWalkStraightLineToPoint) throws NotInContextException;
    int levelUpHenchman(NWObject oCreature, int nClass, bool bReadyAllSpells, int nPackage) throws NotInContextException;
    idempotent int lineOfSightObject(NWObject oSource, NWObject oTarget) throws NotInContextException;
    idempotent int lineOfSightVector(NWVector vSource, NWVector vTarget) throws NotInContextException;
    idempotent void lockCameraDirection(NWObject oPlayer, bool bLocked) throws NotInContextException;
    idempotent void lockCameraDistance(NWObject oPlayer, bool bLocked) throws NotInContextException;
    idempotent void lockCameraPitch(NWObject oPlayer, bool bLocked) throws NotInContextException;
    idempotent NWEffect magicalEffect(NWEffect eEffect) throws NotInContextException, InvalidEffectException;
    idempotent void musicBackgroundChangeDay(NWObject oArea, int nTrack) throws NotInContextException;
    idempotent void musicBackgroundChangeNight(NWObject oArea, int nTrack) throws NotInContextException;
    idempotent int musicBackgroundGetBattleTrack(NWObject oArea) throws NotInContextException;
    idempotent int musicBackgroundGetDayTrack(NWObject oArea) throws NotInContextException;
    idempotent int musicBackgroundGetNightTrack(NWObject oArea) throws NotInContextException;
    idempotent void musicBackgroundPlay(NWObject oArea) throws NotInContextException;
    idempotent void musicBackgroundSetDelay(NWObject oArea, int nDelay) throws NotInContextException;
    idempotent void musicBackgroundStop(NWObject oArea) throws NotInContextException;
    idempotent void musicBattleChange(NWObject oArea, int nTrack) throws NotInContextException;
    idempotent void musicBattlePlay(NWObject oArea) throws NotInContextException;
    idempotent void musicBattleStop(NWObject oArea) throws NotInContextException;
    idempotent void nightToDay(NWObject oPlayer, double fTransitionTime) throws NotInContextException;
    void openInventory(NWObject oCreature, NWObject oPlayer) throws NotInContextException;
    void openStore(NWObject oStore, NWObject oPC, int nBonusMarkUp, int nBonusMarkDown) throws NotInContextException;
    void playAnimation(int nAnimation, double fSpeed, double fSeconds) throws NotInContextException;
    void playSound(string sSoundName) throws NotInContextException;
    void playSoundByStrRef(int nStrRef, int nRunAsAction) throws NotInContextException;
    void playVoiceChat(int nVoiceChatID, NWObject oTarget) throws NotInContextException;
    void popUpDeathGUIPanel(NWObject oPC, bool bRespawnButtonEnabled, bool bWaitForHelpButtonEnabled, int nHelpStringReference, string sHelpString) throws NotInContextException;
    void popUpGUIPanel(NWObject oPC, int nGUIPanel) throws NotInContextException;
    string randomName(int nNameType) throws NotInContextException;
    void recomputeStaticLighting(NWObject oArea) throws NotInContextException;
    SavingThrowResult reflexSave(NWObject oCreature, int nDC, SaveType tSaveType, NWObject oSaveVersus) throws NotInContextException;
    idempotent void removeEffect(NWObject oCreature, NWEffect eEffect) throws NotInContextException, InvalidEffectException;
    idempotent void removeFromParty(NWObject oPC) throws NotInContextException;
    idempotent void removeHenchman(NWObject oMaster, NWObject oHenchman) throws NotInContextException;
    idempotent void removeItemProperty(NWObject oItem, NWItemProperty ipProperty) throws NotInContextException, InvalidItemPropertyException;
    idempotent void removeJournalQuestEntry(string szPlotID, NWObject oCreature, bool bAllPartyMembers, bool bAllPlayers) throws NotInContextException;
    idempotent void removeSummonedAssociate(NWObject oMaster, NWObject oAssociate) throws NotInContextException;
    int resistSpell(NWObject oCaster, NWObject oTarget) throws NotInContextException;
    void restoreBaseAttackBonus(NWObject oCreature) throws NotInContextException;
    idempotent void restoreCameraFacing() throws NotInContextException;
    idempotent NWObject retrieveCampaignObject(string sCampaignName, string sVarName, NWLocation locLocation, NWObject oOwner, NWObject oPlayer) throws NotInContextException;
    idempotent double roundsToSeconds(int nRounds) throws NotInContextException;
    void sendMessageToAllDMs(string szMessage) throws NotInContextException;
    void sendMessageToPC(NWObject oPlayer, string szMessage) throws NotInContextException;
    void sendMessageToPCByStrRef(NWObject oPlayer, int nStrRef) throws NotInContextException;
    idempotent void setAILevel(NWObject oTarget, AILevel tAILevel) throws NotInContextException;
    idempotent void setActionMode(NWObject oCreature, ActionMode tActionMode, bool bStatus) throws NotInContextException;
    idempotent void setAreaTransitionBMP(int nPredefinedAreaTransition, string sCustomAreaTransitionBMP) throws NotInContextException;
    idempotent void setAssociateListenPatterns(NWObject oTarget) throws NotInContextException;
    idempotent void setBaseAttackBonus(int nBaseAttackBonus, NWObject oCreature) throws NotInContextException;
    idempotent void setCalendar(int nYear, int nMonth, int nDay) throws NotInContextException;
    idempotent void setCameraFacing(double fDirection, double fDistance, double fPitch, int nTransitionType) throws NotInContextException;
    idempotent void setCameraHeight(NWObject oPlayer, double fHeight) throws NotInContextException;
    idempotent void setCameraMode(NWObject oPlayer, int nCameraMode) throws NotInContextException;
    idempotent void setCampaignFloat(string sCampaignName, string sVarName, double flFloat, NWObject oPlayer) throws NotInContextException;
    idempotent void setCampaignInt(string sCampaignName, string sVarName, int nInt, NWObject oPlayer) throws NotInContextException;
    idempotent void setCampaignLocation(string sCampaignName, string sVarName, NWLocation locLocation, NWObject oPlayer) throws NotInContextException;
    idempotent void setCampaignString(string sCampaignName, string sVarName, string sString, NWObject oPlayer) throws NotInContextException;
    idempotent void setCampaignVector(string sCampaignName, string sVarName, NWVector vVector, NWObject oPlayer) throws NotInContextException;
    idempotent void setColor(NWObject oObject, int nColorChannel, int nColorValue) throws NotInContextException;
    idempotent void setCommandable(bool bCommandable, NWObject oTarget) throws NotInContextException;
    idempotent void setCreatureAppearanceType(NWObject oCreature, int nAppearanceType) throws NotInContextException;
    idempotent void setCreatureBodyPart(CreaturePart tCreaturePart, int nModelNumber, NWObject oCreature) throws NotInContextException;
    idempotent void setCreatureTailType(int nTailType, NWObject oCreature) throws NotInContextException;
    idempotent void setCreatureWingType(int nWingType, NWObject oCreature) throws NotInContextException;
    idempotent void setCustomToken(int nCustomTokenNumber, string sTokenValue) throws NotInContextException;
    idempotent void setCutsceneCameraMoveRate(NWObject oCreature, double fRate) throws NotInContextException;
    idempotent void setCutsceneMode(NWObject oCreature, bool bInCutscene, bool bLeftClickingEnabled) throws NotInContextException;
    idempotent void setDeity(NWObject oCreature, string sDeity) throws NotInContextException;
    idempotent void setDescription(NWObject oObject, string sNewDescription, bool bIdentifiedDescription) throws NotInContextException;
    idempotent void setDroppableFlag(NWObject oItem, bool bDroppable) throws NotInContextException;
    idempotent void setEncounterActive(bool bNewValue, NWObject oEncounter) throws NotInContextException;
    idempotent void setEncounterDifficulty(int nEncounterDifficulty, NWObject oEncounter) throws NotInContextException;
    idempotent void setEncounterSpawnsCurrent(int nNewValue, NWObject oEncounter) throws NotInContextException;
    idempotent void setEncounterSpawnsMax(int nNewValue, NWObject oEncounter) throws NotInContextException;
    idempotent void setFacing(double fDirection) throws NotInContextException;
    idempotent void setFacingPoint(NWVector vTarget) throws NotInContextException;
    idempotent void setFogAmount(int nFogType, int nFogAmount, NWObject oArea) throws NotInContextException;
    idempotent void setFogColor(int nFogType, int nFogColor, NWObject oArea) throws NotInContextException;
    idempotent void setFootstepType(int nFootstepType, NWObject oCreature) throws NotInContextException;
    idempotent void setFortitudeSavingThrow(NWObject oObject, int nFortitudeSave) throws NotInContextException;
    idempotent void setHardness(int nHardness, NWObject oObject) throws NotInContextException;
    idempotent void setIdentified(NWObject oItem, bool bIdentified) throws NotInContextException;
    idempotent void setImmortal(NWObject oCreature, bool bImmortal) throws NotInContextException;
    idempotent void setInfiniteFlag(NWObject oItem, bool bInfinite) throws NotInContextException;
    idempotent void setIsDestroyable(bool bDestroyable, bool bRaiseable, bool bSelectableWhenDead) throws NotInContextException;
    idempotent void setIsTemporaryEnemy(NWObject oTarget, NWObject oSource, bool bDecays, double fDurationInSeconds) throws NotInContextException;
    idempotent void setIsTemporaryFriend(NWObject oTarget, NWObject oSource, bool bDecays, double fDurationInSeconds) throws NotInContextException;
    idempotent void setIsTemporaryNeutral(NWObject oTarget, NWObject oSource, bool bDecays, double fDurationInSeconds) throws NotInContextException;
    idempotent void setItemCharges(NWObject oItem, int nCharges) throws NotInContextException;
    idempotent void setItemCursedFlag(NWObject oItem, bool bCursed) throws NotInContextException;
    idempotent void setItemStackSize(NWObject oItem, int nSize) throws NotInContextException;
    idempotent void setKeyRequiredFeedback(NWObject oObject, string sFeedbackMessage) throws NotInContextException;
    idempotent void setListenPattern(NWObject oObject, string sPattern, int nNumber) throws NotInContextException;
    idempotent void setListening(NWObject oObject, bool bValue) throws NotInContextException;
    idempotent void setLocalFloat(NWObject oObject, string sVarName, double fValue) throws NotInContextException;
    idempotent void setLocalInt(NWObject oObject, string sVarName, int nValue) throws NotInContextException;
    idempotent void setLocalLocation(NWObject oObject, string sVarName, NWLocation lValue) throws NotInContextException;
    idempotent void setLocalObject(NWObject oObject, string sVarName, NWObject oValue) throws NotInContextException;
    idempotent void setLocalString(NWObject oObject, string sVarName, string sValue) throws NotInContextException;
    idempotent void setLockKeyRequired(NWObject oObject, bool bKeyRequired) throws NotInContextException;
    idempotent void setLockKeyTag(NWObject oObject, string sNewKeyTag) throws NotInContextException;
    idempotent void setLockLockDC(NWObject oObject, int nNewLockDC) throws NotInContextException;
    idempotent void setLockLockable(NWObject oObject, bool bLockable) throws NotInContextException;
    idempotent void setLockUnlockDC(NWObject oObject, int nNewUnlockDC) throws NotInContextException;
    idempotent void setLocked(NWObject oTarget, bool bLocked) throws NotInContextException;
    idempotent void setLootable(NWObject oCreature, bool bLootable) throws NotInContextException;
    idempotent void setMapPinEnabled(NWObject oMapPin, bool bEnabled) throws NotInContextException;
    idempotent void setMaxHenchmen(int nNumHenchmen) throws NotInContextException;
    idempotent void setModuleXPScale(int nXPScale) throws NotInContextException;
    idempotent void setName(NWObject oObject, string sNewName) throws NotInContextException;
    idempotent void setPCChatMessage(string sNewChatMessage) throws NotInContextException;
    idempotent void setPCChatVolume(TalkVolume tTalkVolume) throws NotInContextException;
    idempotent void setPCDislike(NWObject oPlayer, NWObject oTarget) throws NotInContextException;
    idempotent void setPCLike(NWObject oPlayer, NWObject oTarget) throws NotInContextException;
    idempotent void setPanelButtonFlash(NWObject oPlayer, Button tButton, bool bEnableFlash) throws NotInContextException;
    idempotent void setPhenoType(PhenoType tPhenoType, NWObject oCreature) throws NotInContextException;
    idempotent void setPickpocketableFlag(NWObject oItem, bool bPickpocketable) throws NotInContextException;
    idempotent void setPlaceableIllumination(NWObject oPlaceable, bool bIlluminate) throws NotInContextException;
    idempotent void setPlotFlag(NWObject oTarget, bool bPlotFlag) throws NotInContextException;
    idempotent void setPortraitId(NWObject oTarget, int nPortraitId) throws NotInContextException;
    idempotent void setPortraitResRef(NWObject oTarget, string sPortraitResRef) throws NotInContextException;
    idempotent void setReflexSavingThrow(NWObject oObject, int nReflexSave) throws NotInContextException;
    idempotent void setSkyBox(int nSkyBox, NWObject oArea) throws NotInContextException;
    idempotent void setStandardFactionReputation(StandardFaction tStandardFaction, int nNewReputation, NWObject oCreature) throws NotInContextException;
    idempotent void setStolenFlag(NWObject oItem, bool bStolenFlag) throws NotInContextException;
    idempotent void setStoreGold(NWObject oidStore, int nGold) throws NotInContextException;
    idempotent void setStoreIdentifyCost(NWObject oidStore, int nCost) throws NotInContextException;
    idempotent void setStoreMaxBuyPrice(NWObject oidStore, int nMaxBuy) throws NotInContextException;
    idempotent void setSubRace(NWObject oCreature, string sSubRace) throws NotInContextException;
    idempotent void setTileMainLightColor(NWLocation lTileLocation, TileMainLightColor nMainLight1Color, TileMainLightColor nMainLight2Color) throws NotInContextException;
    idempotent void setTileSourceLightColor(NWLocation lTileLocation, TileSourceLightColor nSourceLight1Color, TileSourceLightColor nSourceLight2Color) throws NotInContextException;
    idempotent void setTime(int nHour, int nMinute, int nSecond, int nMillisecond) throws NotInContextException;
    idempotent void setTrapActive(NWObject oTrapObject, bool bActive) throws NotInContextException;
    idempotent void setTrapDetectDC(NWObject oTrapObject, int nDetectDC) throws NotInContextException;
    idempotent void setTrapDetectable(NWObject oTrapObject, bool bDetectable) throws NotInContextException;
    idempotent int setTrapDetectedBy(NWObject oTrap, NWObject oDetector, bool bDetected) throws NotInContextException;
    idempotent void setTrapDisabled(NWObject oTrap) throws NotInContextException;
    idempotent void setTrapDisarmDC(NWObject oTrapObject, int nDisarmDC) throws NotInContextException;
    idempotent void setTrapDisarmable(NWObject oTrapObject, bool bDisarmable) throws NotInContextException;
    idempotent void setTrapKeyTag(NWObject oTrapObject, string sKeyTag) throws NotInContextException;
    idempotent void setTrapOneShot(NWObject oTrapObject, bool bOneShot) throws NotInContextException;
    idempotent void setTrapRecoverable(NWObject oTrapObject, bool bRecoverable) throws NotInContextException;
    idempotent void setUseableFlag(NWObject oPlaceable, bool bUseableFlag) throws NotInContextException;
    idempotent void setWeather(NWObject oTarget, Weather tWeather) throws NotInContextException;
    idempotent void setWillSavingThrow(NWObject oObject, int nWillSave) throws NotInContextException;
    idempotent void setXP(NWObject oCreature, int nXpAmount) throws NotInContextException;
    idempotent void soundObjectPlay(NWObject oSound) throws NotInContextException;
    idempotent void soundObjectSetPosition(NWObject oSound, NWVector vPosition) throws NotInContextException;
    idempotent void soundObjectSetVolume(NWObject oSound, int nVolume) throws NotInContextException;
    idempotent void soundObjectStop(NWObject oSound) throws NotInContextException;
    void speakOneLinerConversation(string sDialogResRef, NWObject oTokenTarget) throws NotInContextException;
    void speakString(string sStringToSpeak, TalkVolume tTalkVolume) throws NotInContextException;
    void speakStringByStrRef(int nStrRef, TalkVolume tTalkVolume) throws NotInContextException;
    void startNewModule(string sModuleName) throws NotInContextException;
    void stopFade(NWObject oCreature) throws NotInContextException;
    idempotent void storeCameraFacing() throws NotInContextException;
    idempotent int storeCampaignObject(string sCampaignName, string sVarName, NWObject oObject, NWObject oPlayer) throws NotInContextException;
    idempotent void summonAnimalCompanion(NWObject oMaster) throws NotInContextException;
    idempotent void summonFamiliar(NWObject oMaster) throws NotInContextException;
    idempotent NWEffect supernaturalEffect(NWEffect eEffect) throws NotInContextException, InvalidEffectException;
    idempotent void surrenderToEnemies() throws NotInContextException;
    void takeGoldFromCreature(int nAmount, NWObject oCreatureToTakeFrom, bool bDestroy) throws NotInContextException;
    AttackResult touchAttackMelee(NWObject oTarget, bool bDisplayFeedback) throws NotInContextException;
    AttackResult touchAttackRanged(NWObject oTarget, bool bDisplayFeedback) throws NotInContextException;
    idempotent double turnsToSeconds(int nTurns) throws NotInContextException;
    void unpossessFamiliar(NWObject oCreature) throws NotInContextException;
    idempotent double vectorMagnitude(NWVector vVector) throws NotInContextException;
    idempotent NWVector vectorNormalize(NWVector vVector) throws NotInContextException;
    idempotent double vectorToAngle(NWVector vVector) throws NotInContextException;
    idempotent NWEffect versusAlignmentEffect(NWEffect eEffect, int nLawChaos, int nGoodEvil) throws NotInContextException, InvalidEffectException;
    idempotent NWEffect versusRacialTypeEffect(NWEffect eEffect, RacialType tRacialType) throws NotInContextException, InvalidEffectException;
    idempotent NWEffect versusTrapEffect(NWEffect eEffect) throws NotInContextException, InvalidEffectException;
    SavingThrowResult willSave(NWObject oCreature, int nDC, SaveType tSaveType, NWObject oSaveVersus) throws NotInContextException;
    void writeTimestampedLogEntry(string sLogEntry) throws NotInContextException;
  };
};
